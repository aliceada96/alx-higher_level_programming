Usage of 1-my_list.py

The module defines a class ``MyList`` that inherits from ``list`` which is a builtin classs

``MyList`` can be instantiated in the following ways

No arguments, Returns empty list:

::
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>
    >>> print(my_list)
    []
::

a single argument

::
    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]
::

if object is not iterable a Typerror will be raised
::
    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable
::

if there is more than one instatiation of arguments a TypeError will be raised
::
    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)
::

Elements can be added to ``My-List`` using ``append()`` method and replaced through indexing,
and removed using ``remove()`` methods
:
     >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]
    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]
    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]
::

``print_sorted `` method
It takes no arguments, raises TypeError if suppplied
::
    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given
::

it prints the list in ascending order but dosesnt alter the order of original list
::
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

strings are orderred in alphabetical order
::
    >>> my_list = MyList()
    >>> my_list.append("Brennan")
    >>> my_list.append("Poppy")
    >>> my_list.append("School")
    >>> my_list.append("ALX")
    >>> my_list.append("Betty")
    >>> print(my_list)
    ['ALX', 'Brennan', 'Poppy', 'School', 'Betty']
    >>> my_list.print_sorted()
    ['Betty', 'Brennan', 'ALX', 'Poppy', 'School']
::

Nothing to sort with empty lists.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

If ``print_sorted(...)`` is called on a list of different types, a TypeError
will be raised.

::

    >>> my_list = MyList([1, "Betty", "Holberton", 5])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()
    